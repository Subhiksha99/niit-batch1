Develop library management system. This system has the following main use cases: 
** generate default, parameterised constructors, getters & Setters, toString methods for all classes
** Allow users to interact with application using Scanner class

User
  - list all books
  - search a specific book based on
    book title (or) author (or) publisher
  - borrow a book
  - return a book
  - Raise a request for new book

Admin
  - can add, delete, list, update books info to/from library
  - can add, delete,update & list users
  - assign user as a library manager

Library Manager -
  - can add, update, or delete  books and loan records.
  - order new books.
  - update title, price, quantity of books
  - view loan records

- Classes

Book-
  - create private Fields 
    id, title, description, price, author, publisher & quantity.
  
User -
  - create private Fields 
    id, username, fullName, contactNo,  email, password, role

LoanReacord -
  - create private Fields 
    borrow date, due date, return date
  

packages -
 com.example
   Main.java
 com.example.entity
   Book, User, LoanRecord classes
 com.example.service
   Interfaces & Implementation classes for all entity classes
 com.example.repository
   Interfaces & Implementation classes for storing and retrieving information about users, books & loanRecords

=============================================================
// Sample code
// Entity
com.example.entity
  //User, Book, LoanRecords

class User {
 // fields
 private int id;
 private String uName;

 // constructor
 User() {}
 User(int id) {this.id=id}

 // public Getters & Setters

 // toString()
}

// Service
com.example.service
// interface
interface IUserService {
  User addUser(User user);
  void deleteUser(int id);
  User updateUser(int id, String newEmail);
  User updateUser(User user);
  List<User> getAllUsers();
} 

// UserServiceImpl.java
import com.example.repository.UserRepositoryImpl
import com.example.repository.IUserRepository

class UserServiceImpl implements IUserService{
  // Create userRepo obj
  IUserRepository userRepo =  new UserRepositoryImpl();
 
  User addUser(User user) {
     return userRepo.addUser(user);
  };
  void deleteUser(int id) {};
  User updateUser(int id, String newEmail) {};
  User updateUser(User user) {};
  List<User> getAllUsers() {};
}

// Repository
// com.example.repository
interface IUserRepository {
  User addUser(User user);
  void deleteUser(int id);
  User updateUser(int id, String newEmail);
  User updateUser(User user);
  List<User> getAllUsers();
} 
class UserRespositoryImpl implements IUserRepository{
  List<User> userList = new ArrayList<>();
  User addUser(User user) {
 	// logic
        userList.add(user);
        return user;
  };
  void deleteUser(int id) {};
  User updateUser(int id, String newEmail) {};
  User updateUser(User user) {};
  List<User> getAllUsers() {};
}


// Main.java
// com.example
import com.example.service.BookServiceImpl;
import com.example.service.IBookService;

class App {
   public static void main(String[] args) {
	IBookService bookService = new BookServiceImpl();

        Scanner sc = new Scanner(System.in);
        sop("1. User");
        sop("2. Admin");
        sop("3. Library Manager");
      
        sop("Select role");
        int role = sc.nextInt();

        switch(role) {

          case 1:
		sop("1. list books");
                sop("2. search book");
                sop("Select Option");
                int selOpt= sc.nextInt();             
                switch(selOpt) {
                   case 1:
                     sop(bookService.getAllBooks());
                   case 2:
                   default:     
                }
               break;
         case 2:
               break;
 
         default:
       }

   }

}

======================================