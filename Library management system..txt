Develop library management system. This system has the following main use cases: 
** generate default, parameterised constructors, getters & Setters, toString methods for all classes
** Allow users to interact with application using Scanner class

User
  - list all books
  - search a specific book based on
    book title (or) author (or) publisher
  - borrow a book
  - return a book
  - Raise a request for new book

Admin
  - can add, delete, list, update books info to/from library
  - can add, delete,update & list users
  - assign user as a library manager

Library Manager -
  - can add, update, or delete  books and loan records.
  - order new books.
  - update title, price, quantity of books
  - view loan records

- Classes

Book-
  - create private Fields 
    id, title, description, price, author, publisher & quantity.
  
User -
  - create private Fields 
    id, username, fullName, contactNo,  email, password, role, dob

LoanReacord -
  - create private Fields 
    borrow date, due date, return date
  

packages -
 com.example
   Main.java
 com.example.entity
   Book, User, LoanRecord classes
 com.example.service
   Interfaces & Implementation classes for all entity classes
 com.example.repository
   Interfaces & Implementation classes for storing and retrieving information about users, books & loanRecords

import java.time.LocalDate;
 class User {
    String name,
    LocalDate dob;

    User(String name, LocalDate dob) {
       this.name = name;
       this.dob = dob;
    }
}

User user = new User("Raj", LocalDate.of(2002, 12, 21));


class Outer {
   
   static class InnerStaticClass {
      void m1() {}
   }

   class InnerClass {
     void m2() {}
   }

}

class Test {
    psvm() {
        Outer.InnerStaticClass st = new Outer.InnerStaticClass();
        st.m1();
       
        Outer outer = new Outer();
        Outer.InnerClass ns = outer.new InnerClass();
        ns.m2();
    }

}