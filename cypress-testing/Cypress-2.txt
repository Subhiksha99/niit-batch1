Cypress
========
- runs inside browser

Uses
1. e2e Testing
2. Component Testing

Echo system
1. Test Runner - open source
2. Dashboard   - Paid version

Features
1. Time travel
2. Debuggability
3. Automatic waits (built-in waits)
4. Consistence results
5. Screenshots & Videos
6. Crosss browser testing


Limitations
1. We can't automate window/mobile based apps
2. Limited support for browser
   chrome, edge & electron browsers alone supported
3. Javascript & TypeScript support
4. third party reporting tools integration is limited

cypress.io

Cypress App - runner
Cypress Dashboard - 

Environment Setup
1. NodeJs
2. VSCode
3. create Angular app
4. install cypress
   npm install cypress@Latest --save -dev
7. start cypress
   npx cypress open
   OR
   node_modules/.bin/cypress open

Select Component Testing
Select browser
   supported browsers
   chrome, edge, electron
Select Front-end framework 
   Angular
Install dev dependencies
 npm install -D @angular/cli @angular-devkit/build- angular @angular/core @angular/common @angular/platform-browser-dynamic

Configuration files
  proceed with default

Update spec pattern
  select VSCode


// Create new test
describe('', ()=> {
  it('verify title of the page', () => {
    cy.visit('https://example.cypress.io');
    cy.title().should('eq', 'Cypress.io: Kitchen Sink')
  })

  it('verify title of the page - negative test', () => {
    cy.visit('https://example.cypress.io');
    cy.title().should('eq', 'Cypress.io')

  })
  
  it('verify title of the page - negative test', ()   => {
    cy.visit('https://example.cypress.io');
    cy.title().should('not.eq', 'Cypress.io')
  })

  it('localhost:4200', () => {
    cy.visit('http://localhost:4200')
  })

});

// Options to run test cases

// run test
npx cypress open

// head less mode - won't open browser
npx cypress run

// headed mode
npx cypress run --headed

// execute specific file
npx cypress run --spec ./cypress/e2e/mytest.spec.cy.ts

// execute tests on specific  browser
npx cypress run --browser chrome

// execute tests on specific  browser in headed mode
npx cypress run --browser chrome --headed

==========
Locators
  - 1. CSS Selector
  - 2. Xpath Selector
==========
* Using locators we can identify elements

// Supported selectors
1. CSS Selector
   ** tag is optional
   tag id
     #id      - without tag
        ex: #p1
     tag#id   - with tag
        ex: p#p1	
   tag class
     .class
        ex: .red
     tag.class - with tag
        ex: p.red
   tag attribute
      [attribute='value']
      tag[attribute='value'] - with tag
      ex:
       input[type='password']
   tag class attribute
      .class[attribute='value']
      tag.class[attribute='value'] - with tag
       ex:
         input.form-control[type='number']
   ** tag is optional

Example:
describe('CSS Locators Test Suite', () => {

    it('Verify banner using "tag.class"', () => {
        cy.visit('https://example.cypress.io/');

        // Verify banner contains - 'Kitchen Sink'
        // use get() method for css selectors
        cy.get('div.container > h1').contains('Kitchen Sink')
    })
});

2. XPath - install cypress xpath plugin

//Step 1:  xpath plugin installation
npm install -D cypress-xpath

//Step 2: Add xpath reference in support/commands.js
/// <reference types="cypress-xpath"/> 

//Step 3: Add below line in support/e2e.js
require('cypress-xpath')

Ex:
describe('XPath Locators Test Suite', () => {
    it('Verify h2 text using xpath', () => {
        cy.visit('https://example.cypress.io/');

        // Verity h2 text using xpath
        // use xpath() method for xpath
        cy.xpath(".//div[@id='utilities']/h2").contains('Commands');
    })
})

//basic xpath expression examples:

Xpath=//input[@type='text']
Xpath=//label[@id='message23']
Xpath=//input[@value='RESET']
Xpath=//*[@class='barone']
Xpath=//a[@href='http://demo.example.com/']
Xpath=//img[@src='//example.com/images/home/java.png']

// contains()
Xpath=//*[contains(@name,'btn')]
Xpath=//*[contains(@id,'message')]



============
Assertions  
  - uses 'Chai' library assertions
  - Types
    1. Implicit - should, and 
    2. Explicit - expect(BDD), assert(TDD)
============
describe('Assertions', () => {
   it('Using should & and implicity assertions', () => {
        // load web page
        cy.visit('https://parabank.parasoft.com/parabank/index.htm');

        // cy.url() - gets current url
        // Options 1 - writing multiple assertions using 'should'
        cy.url().should('include', 'parabank.parasoft.com');
        cy.url().should('eq', 'https://parabank.parasoft.com/parabank/index.htm');
        cy.url().should('contain', 'parabank')

        // Option 2: Writing multiple assertions using 'should' & 'and'
        cy.url().should('include', 'parabank.parasoft.com');
        cy.url().and('eq', 'https://parabank.parasoft.com/parabank/index.htm');
        cy.url().and('contain', 'parabank')
    });

    it('Using expect & assert explicit assertions', () => {
        cy.visit('https://opensource-demo.orangehrmlive.com/web/index.php/auth/login');
        cy.get("input[placeholder='Username']").type("admin");
        cy.get("input[placeholder='Password']").type("admin123");

        // BDD - expet
        cy.get("button[type='submit']").then(e => {
            const txt = e.text();
            expect(txt).to.contain('Login');
        }).click();

        // TDD - assert
        cy.get('p.oxd-userdropdown-name').then(e => {
            const txt = e.text();
            assert.equal(txt, 'Paul Collings');
        })
    });

});

===================
Folder Structure
==================
cypress
   downloads           - downloaded files
   e2e                 - tests
   fixtures            - static test data
   screenshots         - captured screenshots
   videos              - videos
   node_modules        - modules for cypress
   cypress.config.js   - Cypress Configurations
   package.json        - Depenendencies 
   
   support             - reusable scripts
      commands.js  - Custom commands
      e2e.js       - Loads before tests



						***










 